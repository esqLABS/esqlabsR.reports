---
title: "esqlabsR.report.template" # Title of the document
subtitle: ""
author: "esqLABS GmbH"
date: "now"
  
params:
  runMainScript: no
  projectConfigurationFile: "../../../ProjectConfiguration.xlsx" # relative path from this document
  saveResultsFolder: "data/"
  saveFiguresFolder: "figures/"
  loadPreSimulatedResults: no
  setTestParameters: false
  loadResultsFolder: ~
---
\newpage

# About this template

# Report Metadata

The report's metadata can be customized by changing the valued in the report's
header.

# Parameters

Parameters defined in the header of the documents can be accessed by R in the `params` object.

```{r, echo = TRUE}
params$setTestParameters
```



# Advanced metadata

Other metadata can be accessed and modified in the `_quarto.yml` file.


# Elements


## Callout boxes

::: {.callout-note}
Text can be displayed in callout boxes to draw reader's attention.
:::

To generate callout grammatically use the following structure

```{r, results='asis', echo = TRUE}
if (params$setTestParameters) {
cat(
"::: {.callout-warning}
`setTestParameters` is set to `TRUE` !
:::"
)}
```


# Figures

## Plot a figure 

```
![](figures/Aciclovir Plots.png)
```
![](figures/Aciclovir Plots.png)

## Plot all figures in a directory

This need to be setup in two different code chunks
```r
# list files we want to display
figs <- list.files("figures/", pattern = "\\.[pj][pn]g", full.names = TRUE)
# Extract the name of the plot from the files names
figs_names <- fs::path_ext_remove(fs::path_file(figs))
```

```r
#| fig-cap: !expr figs_names
knitr::include_graphics(figs)
```

```{r}
# list files we want to display
figs <- list.files("figures/", pattern = "\\.[pj][pn]g", full.names = TRUE)
# Extract the name of the plot from the files names
figs_names <- fs::path_ext_remove(fs::path_file(figs))
```


```{r}
#| fig-cap: !expr figs_names
knitr::include_graphics(figs)
```


# Source Code
It is often cleaner to define functions and logic in separate code files. for this, use the `scripts/` folder and source the files there


```r
# source the script
source("scripts/main.R")
# use its function and pass parameters
main(params = params)
```

```{r message=FALSE, eval = params$runMainScript}
source("scripts/main.R")
main(params = params)
```


# Source Text

In some case, it can be useful to insert text from another file.

{{< include source_text.md >}}

# Display Data table

```{r}
read.csv("data/PopulationScenarioFromCSV_population.csv")[,c("IndividualId", "Gender", "Population", "Organism.Weight", "Organism.BMI")]
```




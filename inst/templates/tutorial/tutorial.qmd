---
title: "EsqlabsR Reports Tutorial" # Title of the document
subtitle: "`{esqlabs.Reports}`, provides Esqlabs' report template templates that match the company's quality standards and design with minimal effort. These templates relies on Quarto, which is multi-language, next-generation version of R Markdown from Posit. This tutorial will help getting started with Quarto, provide some tips and tricks and details on how the esqlabs templates work."
author: "esqLABS GmbH"
date: "now"

params:
  run_script: yes
  client_name: "Very Good Very Nice Inc."
  days_before_Xmax: !expr as.integer(as.Date(paste0(format(Sys.Date(), "%Y"),
                                                                 "-12-25")) - Sys.Date())
---
\newpage



# About Quarto Documents

Quarto documents allow to mix text and code to produce beautiful, reproducible reports. 

This file is Quarto document with the extension .qmd. It set to be rendered as a `.pdf` file. But you could also choose to render it into other formats like HTML, MS Word or other...

All information about Quarto can be found [here](https://quarto.org/docs/guide/).


# About Markdown

Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.

Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:

> A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber

Using Markdown, you can:

  - format text,
  - insert images,
  - build tables,
  - write equations using LaTeX syntax,
  - Draw diagrams,
  - and many more ...

[This page](https://quarto.org/docs/authoring/markdown-basics.html) provides examples of the most commonly used markdown syntax.

# Report Header
## Report Metadata

An (optional) YAML header demarcated by three dashes (---) on either end at the top of the document.
The basic syntax of YAML uses key-value pairs in the format `key: value`. 
Use that to customize the report's header including title, subtitle, author and date.

## Report Parameters

Parameters defined in the header of the documents can be accessed by R in the `params` object.

It can be character, numeric, integer, and logical.

```
params:
  run_script: yes
  client_name: "Very Good Very Nice Inc"
  days_before_Xmax: !expr as.Date(paste0(format(Sys.Date(), "%Y"), "-12-25")) - Sys.Date())
```

```{r, echo = TRUE}
params$client_name
```

It is also possible to inclue R code directly in parameters using the `!expr` tag.

Parameters can be used inline to produce dynamic text:

> ``Only **`r
> as.integer(params$days_before_Xmax)`** days before Christmas ! ``

Only **`r as.integer(params$days_before_Xmax)`** days before Christmas !

## Advanced Report Settings

Other metadata can be accessed and modified in the `_quarto.yml` file.


# Elements



## Figures

### Plot a figure 

```
![](figures/Aciclovir Plots.png)
```
![](figures/Aciclovir Plots.png)

### Plot all figures in a directory

This need to be setup in two different code chunks
```r
# list files we want to display
figs <- list.files("figures/", pattern = "\\.[pj][pn]g", full.names = TRUE)
# Extract the name of the plot from the files names
figs_names <- fs::path_ext_remove(fs::path_file(figs))
```

```r
#| fig-cap: !expr figs_names
knitr::include_graphics(figs)
```

```{r}
# list files we want to display
figs <- list.files("figures/", pattern = "\\.[pj][pn]g", full.names = TRUE)
# Extract the name of the plot from the files names
figs_names <- fs::path_ext_remove(fs::path_file(figs))
```


```{r}
#| fig-cap: !expr figs_names
knitr::include_graphics(figs)
```


More information about figures [here](https://quarto.org/docs/authoring/figures.html)

## Display Table

### Using Markdown syntax

You can display simple tables by building directly using markdown:

```md
| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax
```

| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax

### From a file

```{r}
#|label: table
#|tbl-cap: "Demonstration of table read from a csv file"
#|tbl-cap-location: bottom
read.csv("data/PopulationScenarioFromCSV_population.csv")[,c("IndividualId", "Gender", "Population", "Organism.Weight", "Organism.BMI")]
```



## Callout boxes

```
::: {.callout-note}
Text can be displayed in callout boxes to draw reader's attention.
:::
```

::: {.callout-note}
Like this
:::

To generate callout grammatically use the following structure

```{r, results='asis', echo = TRUE}
if (params$run_script) {
cat(
"::: {.callout-warning}
`run_script` is set to `TRUE` !
:::"
)}
```


More information about callouts [here](https://quarto.org/docs/authoring/callouts.html)

# Source External Elements

## Source Code
It is often cleaner to define functions and logic in separate code files. for this, use the `scripts/` folder and source the files there


```{r eval = params$run_script, echo = TRUE}
source("scripts/say-hello.R")

say_hello(params$client_name)
```


## Source Text

In some case, it can be useful to insert text from another file.

{{< include texts/source_text.md >}}



